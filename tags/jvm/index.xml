<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JVM on Fulur</title><link>http://example.org/tags/jvm/</link><description>Recent content in JVM on Fulur</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 27 Apr 2025 19:52:52 +0800</lastBuildDate><atom:link href="http://example.org/tags/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM基础：对象布局实战：用 JOL 工具看看真实结构</title><link>http://example.org/posts/java/%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80%E5%AE%9E%E6%88%98%E7%94%A8-jol-%E5%B7%A5%E5%85%B7%E7%9C%8B%E7%9C%8B%E7%9C%9F%E5%AE%9E%E7%BB%93%E6%9E%84/</link><pubDate>Sun, 27 Apr 2025 19:52:52 +0800</pubDate><guid>http://example.org/posts/java/%E5%AF%B9%E8%B1%A1%E5%B8%83%E5%B1%80%E5%AE%9E%E6%88%98%E7%94%A8-jol-%E5%B7%A5%E5%85%B7%E7%9C%8B%E7%9C%8B%E7%9C%9F%E5%AE%9E%E7%BB%93%E6%9E%84/</guid><description>&lt;p>纸上得来终觉浅，我们现在来用工具实战验证一下：&lt;strong>Java 对象在内存中到底长什么样？&lt;/strong>&lt;/p>
&lt;p>JDK 提供了一款由官方支持的内存分析利器 —— &lt;strong>JOL（Java Object Layout）&lt;/strong>，它能让我们像 X 光一样看穿对象的每一个字节。&lt;/p></description></item><item><title>JVM基础：Java对象的创建与内存布局：你以为的 new 不止 new</title><link>http://example.org/posts/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/</link><pubDate>Sun, 27 Apr 2025 16:52:52 +0800</pubDate><guid>http://example.org/posts/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/</guid><description>&lt;h2 id="你真的理解-new-吗">你真的理解 new 吗？&lt;/h2>
&lt;p>“Java 中创建一个对象，不就是 new 一下吗？”这是许多开发者对对象创建的第一印象。但如果你曾经在生产环境遇到内存泄漏、对象占用过大，或者面试时被问“对象在内存中长什么样”，你可能就会意识到，事情没有那么简单。&lt;/p></description></item></channel></rss>